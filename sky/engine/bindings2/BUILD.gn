# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//sky/engine/bindings2/bindings.gni")
import("//sky/engine/core/core.gni")

source_set("bindings2") {
  sources = [
    "dart_converter.cc",
    "dart_converter.h",
    "dart_isolate_scope.cc",
    "dart_isolate_scope.h",
    "dart_persistent_value.cc",
    "dart_persistent_value.h",
    "dart_promise.cc",
    "dart_promise.h",
    "dart_promise_resolver.cc",
    "dart_promise_resolver.h",
    "dart_state.cc",
    "dart_state.h",
    "dart_string_cache.cc",
    "dart_string_cache.h",
    "dart_value.cc",
    "dart_value.h",
    "dart_wrappable.cc",
    "dart_wrappable.h",
    "exception_messages.cc",
    "exception_messages.h",
    "exception_state.cc",
    "exception_state.h",
    "exception_state_placeholder.cc",
    "exception_state_placeholder.h",
    "nullable.h",
    "scheduled_action.cc",
    "scheduled_action.h",
  ]
  deps = [
    ":snapshot_cc",
    "//base",
    "//dart/runtime/bin:libdart_withcore",
    "//sky/engine/wtf",
    ":interfaces_info_individual_core",
  ]
}

action("generate_snapshot_bin") {
  deps = [
    "//dart/runtime/bin:gen_snapshot($host_toolchain)",
  ]
  inputs = [
    "snapshot.dart",
    "//dart/runtime/tools/create_snapshot_bin.py",
  ]
  output = "$target_gen_dir/snapshot_gen.bin"
  outputs = [
    output,
  ]

  gen_snapshot_dir =
      get_label_info("//dart/runtime/bin:gen_snapshot($host_toolchain)",
                     "root_out_dir")
  script = "//dart/runtime/tools/create_snapshot_bin.py"
  args = [
    "--executable",
    rebase_path("$gen_snapshot_dir/gen_snapshot"),
    "--package_root",
    rebase_path("$root_gen_dir"),
    "--script",
    rebase_path("snapshot.dart"),
    "--output_bin",
    rebase_path(output, root_build_dir),
    "--target_os",
    os,
  ]
}

action("generate_snapshot_file") {
  deps = [
    ":generate_snapshot_bin",
  ]
  inputs = [
    "//dart/runtime/tools/create_snapshot_file.py",
    "snapshot.cc.tmpl",
    "$target_gen_dir/snapshot_gen.bin",
  ]
  output = "$target_gen_dir/snapshot.cc"
  outputs = [
    output,
  ]

  script = "//dart/runtime/tools/create_snapshot_file.py"
  args = [
    "--input_bin",
    rebase_path("$target_gen_dir/snapshot_gen.bin"),
    "--input_cc",
    rebase_path("snapshot.cc.tmpl"),
    "--output",
    rebase_path(output),
  ]
}

source_set("snapshot_cc") {
  sources = [
    "$target_gen_dir/snapshot.cc",
  ]

  deps = [
    ":generate_snapshot_file",
  ]
}

# Calls the compute_interfaces_info_individual script.
#
# Parameters:
#   sources = list of IDL files to pass as inputs
#   output_file = pickle file to write
template("compute_interfaces_info_individual") {
  action(target_name) {
    script = "$bindings_scripts_dir/compute_interfaces_info_individual.py"
    if (defined(invoker.visibility)) {
      visibility = invoker.visibility
    }

    file_list = "$target_gen_dir/${target_name}_file_list.txt"
    write_file(file_list, rebase_path(invoker.sources, root_build_dir))

    # FIXME: We should list all python dependencies.
    inputs = [ "$bindings_scripts_dir/utilities.py" ] + invoker.sources

    outputs = [
      file_list,
      invoker.output_file,
    ]

    args = [
      # TODO(eseidel): Remove component-dir, it is meaningless in sky.
      "--component-dir",
      "ignored",
      "--idl-files-list",
      rebase_path(file_list, root_build_dir),
      "--interfaces-info-file",
      rebase_path(invoker.output_file, root_build_dir),

      # TODO(eseidel): only-if-changed is always true, remove
      "--write-file-only-if-changed=1",
    ]
  }
}

compute_interfaces_info_individual("interfaces_info_individual_core") {
  sources = core_idl_files
  output_file = "$bindings_output_dir/InterfacesInfoIndividual.pickle"
}
